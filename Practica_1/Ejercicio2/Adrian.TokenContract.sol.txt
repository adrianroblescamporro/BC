// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.18;

contract TokenContract {
    address public owner;
    uint256 public tokenPrice = 5 ether; // Precio de cada token en Ether

    struct Receivers {
        string name;
        uint256 tokens;
    }

    mapping(address => Receivers) public users;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    event TokensPurchased(address indexed buyer, uint256 amount, uint256 totalTokens);

    constructor() {
        owner = msg.sender;
        users[owner].tokens = 100;
    }

    function double(uint256 _value) public pure returns (uint256) {
        return _value * 2;
    }

    function register(string memory _name) public {
        users[msg.sender].name = _name;
    }

    function giveToken(address _receiver, uint256 _amount) public onlyOwner {
        require(users[owner].tokens >= _amount, "Not enough tokens to transfer");
        users[owner].tokens -= _amount;
        users[_receiver].tokens += _amount;
    }

    function buyTokens(uint256 _tokenAmount) public payable {
        require(msg.value >= _tokenAmount * tokenPrice, "Insufficient Ether sent");
        require(users[owner].tokens >= _tokenAmount, "Not enough tokens available");

        users[owner].tokens -= _tokenAmount;
        users[msg.sender].tokens += _tokenAmount;

        emit TokensPurchased(msg.sender, _tokenAmount, users[msg.sender].tokens);
    }

    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
